// Use DBML to define your database structure
// Docs: https://dbml.dbdiagram.io/docs

enum WalletTypes {
  unisat
  hiro
  xverse
}

enum Role {
  customer
  admin
}

enum OfferStatus {
  created // created the psbt
  signed //buy signed the psbt
  accepted // owner signed the psbt 
  pushed // combine and pushed
  failed // failed when push transaction
  canceled // canceled by owner
  pending // waiting for push tx
}

enum ActivityStatus {
  created
  completed
  removed
}

Table user {
  id integer [pk]
  uuid varchar
  name varchar
  avatar varchar
  bio varchar
  role Role
}

Table wallet {
  id integer [pk]
  uuid varchar
  user_id integer [ref:> user.id]
  address varchar
  pubkey varchar
  paymentAddress varchar
  paymentPubkey varchar
  walletType WalletTypes
}

Table collection {
  id integer [pk]
  uuid varchar
  name varchar
  image_url varchar
  description varchar
  website varchar
  twitter varchar
  discord varchar
}

Table inscription {
  id integer [pk]
  uuid varchar
  inscription_id varchar
  collection_id integer [ref: > collection.id]
}

Table swap_offer {
  id integer [pk]
  uuid varchar
  buyer_id int [ref: > wallet.id]
  seller_id int [ref: > wallet.id]
  price double
  status OfferStatus
  psbt varchar
  buyer_signed_psbt varchar
  seller_signed_psbt varchar
  tx_id varbinary
  expiredAt datetime
}

Table buyer_swap_inscription {
  id integer [pk]
  uuid varchar
  inscription_id int [ref:> inscription.id]
  swap_offer_id int [ref:> swap_offer.id]
}

Table seller_swap_inscription {
  id integer [pk]
  uuid varchar
  inscription_id int [ref:> inscription.id]
  swap_offer_id int [ref:> swap_offer.id]
}

Table sign_message {
  id integer [pk]
  uuid varchar
  address varchar
  mesage varchar
}

Table point {
  id integer [pk]
  uuid varchar
  user_id integer [ref:> user.id]
  amout integer
  swap_offer_id integer [ref:> swap_offer.id]
  description varchar
}